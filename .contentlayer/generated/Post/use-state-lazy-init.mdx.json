{
  "title": "Lazy Initilization and storing functions in React useState hook",
  "summary": "Lazy Initilization and storing functions in React useState hook",
  "publishedAt": "2022-08-28",
  "updatedAt": "2022-08-28",
  "tags": [
    "React",
    "React-hooks"
  ],
  "body": {
    "raw": "\n\n**We often use fairly simple `useState` hook in our apps. sometimes using it might lead to some tiny performance issues. We'll go through some scenarios how to optimize perfomance with Lazy initialization of state in some scenarios. This article is a deep dive through our favorite `useState` hook.**\n\n`useState` hook can also accept a callback function. it can accept a state `T` or a Function that returns a state of type `T`. where `T` can be a String, Number, Array, or an Object.\n\n**This is the signature of useState hook.**\n\n```javascript\nfunction  useState<T>(initialState: T | (() =>  T)): [T, Dispatch<SetStateAction<T>>];\n```\n<Iframe src={\"https://codesandbox.io/embed/busy-kapitsa-c7pkfm?fontsize=14&hidenavigation=1&theme=dark\"} title={\"Codesandbox\"} />\n\n- `useState` hook is an abstraction of `useDispatch` hook of basic level.\n- You can think of `[state, setState]` as `[state, dispatch]` that we get from [`useReducer`](https://reactjs.org/docs/hooks-reference.html#usereducer) where we modify the state using `dispatch` function, so `setState` is a simplified `dispatch` function.\n\n\n&nbsp;\n\n## Lazy Initialization of state\n\nReact useState hook can take a callback function as an initial value, this is called as lazy initialization of state.\n\nWhich means the return value of callback function going to set the state only once throughout the lifecycle of that component when the component mounts and rendered initially.\n\n```jsx\n  const [state, setState] =\n\tuseState<string>(() => {\n\t\tconsole.log(\"function call\"); // this will log for only once in the lifecycle of the component\n\t\tconst initialState: string = someExpensiveComputation(props);\n\t\treturn initialState;\n\t});\n// This is called as lazy initialization of state\n```\n\n**Tips:**\n\n- Always remember to return the value of type you want to set the state for in the callback function, doing not so can lead to [uncontrolled components](https://codesandbox.io/s/dazzling-jones-b6w4q5?file=/src/ControlledUncontrolled.jsx) sometimes.\n- Lazy initialization of state is analogous to passing initial state through `useDispatch(reducerFn, initialValue)`\n- `useReducer` is usually preferable to `useState` when you have complex state logic that involves multiple sub-values. It also lets you optimize performance for components that trigger deep updates because you can pass `dispatch` down instead of callbacks.\n\nIt can be handy and performant when you are using custom hooks that utilize useState or when reading the state gets expensive.\n\nI can think of a scenario where reading the state can get expensive is when we are managing a state of browser localstorage value.\n\n```javascript\n// Here is a basic implementation of a custom hook for maintaining the state of localstorage value\n\nfunction useLocalStorageState(key, defaultValue = \"\") {\n\tconst [state, setState] = React.useState(() => {\n\t\t// We don't want to get our state value everytime from localstorage as it can take some time and lead to perfomance issues\n\t\tconst valueInLocalStorage = window.localStorage.getItem(key);\n\t\tif (valueInLocalStorage) {\n\t\t\treturn JSON.stringify(valueInLocalStorage);\n\t\t}\n\t\treturn typeof defaultValue === \"function\" ? defaultValue() : defaultValue;\n\t});\n\n\tReact.useEffect(() => {\n\t\twindow.localStorage.setItem(key, JSON.parse(state));\n\t}, [key, state]);\n\treturn [state, setState];\n}\n```\n\nWhen we are calling this custom hook from other components like below, we don't want to set the initial value to `initialValue` everytime and override the localstorage value. _so setting the value lazily can get us out of this situation without overriding the localstorage value and it helps in increasing the performance of the app by saving calls to localstorage for the value._\n\n```javascript\nlet storage = useLocalStorageName(\"keyName\", initialValue);\n```\n\n## Storing a function with useState hook :\n\nYes, you heard it right. we can store a function with `useState` hook.\nbut merely passing a function to setState won't do this work. We should return a function to a callback function\n\n```jsx\nconst [myState, setMyState] = React.useState((x) => 5 * x);\n// this don't set the myState to a function, remember Lazy initialization. in fact it is illegal to pass arguments to callback function for useState.\n```\n\ndoing this will set the state to a function.\n\n```jsx\nconst [myState, setMyState] = React.useState(() => (x) => 5 * x);\n// this will set the myState to a function.\n```\n\nif you pass a function as a call back function and return it, the state will get initialized with a function.\n\n```jsx\n// Now we can use myState as a function\nlet value = myState(10);\nconsole.log(value);\n// output: 50\n\nconsole.log(myState(20));\n// output: 100\n```\n\n\n&nbsp;\n\n## How can we mutate a state hook with a function?\n\nJust like initialisation, passing a function to a state setter has a special meaning in React.\n\n[It is used when you want to compute the next state “reductively,”](https://reactjs.org/docs/hooks-reference.html#functional-updates)\n\n```jsx\nconst [count, setCount] = useState(initialCount);\nsetCount((prevCount) => prevCount + 1); // increase the count by one\n// passing a function to setCount will result in updating the previous state value with return value of the function with previous state value as an argument.\n```\n\nif we intend to change the state which store function, doing this will update the\n\n```jsx\nsetMyState(() => (x) => 2 * x);\n```\n\nnow myState has updated to a new function we set\n\n```jsx\nmyState(10);\n// output: 20\n```\n\nHere is a [ codesandbox](https://codesandbox.io/s/busy-kapitsa-c7pkfm?file=/src/App.js:365-395) you can play with.\n\\\n&nbsp;\n\n<Warning type={'info'}>Although it is possible to store functions with useState hook don't abuse it, consider using useCallback hook for storing functions.</Warning>\n\n> Although it is possible to store functions with useState hook don't abuse it, consider using useCallback hook for storing functions.\n\n\\\n&nbsp;\n\\\n&nbsp;\n\n## TL;DR\n\nThere is a subtle difference how you store a state value and how you store a function with react useState hook. If you pass a callback function returning a value to the useState hook, state will be initialized for only for once with the value you are returning when the component mounts and rendered for the first time. It is called Lazy Initialization of state.\n\n```jsx\nconst [state, setState] = useState(() => {\n\tconsole.log(\"function call\"); // this will log for only once in the lifecycle of the component\n\treturn \"This is set for the first time\";\n});\n// This is called as lazy initialization of state\n```\n\nif you pass a function as a call back function and return it the state will get initialized with a function.\n\n```jsx\nconst [multiplyState, setMultiplyFn] = useState(() => (x) => 5 * x);\nconst product = multiplyState(10); // product is 50\n// Although it is possible to store functions with useState hook consider using useCallback hook for this purpose\n```\n\n```jsx\n// this won't store a function in the state\nconst [multiplyFn] = useState((x) => 3 * x);\nconst product = myMultiplier(10);\n```\n",
    "code": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var f=(a,n)=>()=>(n||a((n={exports:{}}).exports,n),n.exports),g=(a,n)=>{for(var s in n)o(a,s,{get:n[s],enumerable:!0})},l=(a,n,s,t)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let c of m(n))!N.call(a,c)&&c!==s&&o(a,c,{get:()=>n[c],enumerable:!(t=h(n,c))||t.enumerable});return a};var y=(a,n,s)=>(s=a!=null?u(k(a)):{},l(n||!a||!a.__esModule?o(s,\"default\",{value:a,enumerable:!0}):s,a)),w=a=>l(o({},\"__esModule\",{value:!0}),a);var r=f((z,i)=>{i.exports=_jsx_runtime});var v={};g(v,{default:()=>x,frontmatter:()=>b});var e=y(r()),b={title:\"Lazy Initilization and storing functions in React useState hook\",publishedAt:\"2022-08-28\",updatedAt:\"2022-08-28\",summary:\"Lazy Initilization and storing functions in React useState hook\",tags:[\"React\",\"React-hooks\"]};function p(a){let n=Object.assign({p:\"p\",strong:\"strong\",code:\"code\",pre:\"pre\",span:\"span\",ul:\"ul\",li:\"li\",a:\"a\",h2:\"h2\",em:\"em\",br:\"br\",blockquote:\"blockquote\"},a.components),{Iframe:s,Warning:t}=n;return s||d(\"Iframe\",!0,\"19:1-19:130\"),t||d(\"Warning\",!0,\"140:1-140:166\"),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:(0,e.jsxs)(n.strong,{children:[\"We often use fairly simple \",(0,e.jsx)(n.code,{children:\"useState\"}),\" hook in our apps. sometimes using it might lead to some tiny performance issues. We'll go through some scenarios how to optimize perfomance with Lazy initialization of state in some scenarios. This article is a deep dive through our favorite \",(0,e.jsx)(n.code,{children:\"useState\"}),\" hook.\"]})}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"useState\"}),\" hook can also accept a callback function. it can accept a state \",(0,e.jsx)(n.code,{children:\"T\"}),\" or a Function that returns a state of type \",(0,e.jsx)(n.code,{children:\"T\"}),\". where \",(0,e.jsx)(n.code,{children:\"T\"}),\" can be a String, Number, Array, or an Object.\"]}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.strong,{children:\"This is the signature of useState hook.\"})}),`\n`,(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsx)(n.code,{className:\"language-javascript\",children:(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"function\"}),\"  useState\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"initialState\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"|\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\"  \",(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"Dispatch\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"SetStateAction\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token constant\",children:\"T\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\">>\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]})})}),`\n`,(0,e.jsx)(s,{src:\"https://codesandbox.io/embed/busy-kapitsa-c7pkfm?fontsize=14&hidenavigation=1&theme=dark\",title:\"Codesandbox\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"useState\"}),\" hook is an abstraction of \",(0,e.jsx)(n.code,{children:\"useDispatch\"}),\" hook of basic level.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"You can think of \",(0,e.jsx)(n.code,{children:\"[state, setState]\"}),\" as \",(0,e.jsx)(n.code,{children:\"[state, dispatch]\"}),\" that we get from \",(0,e.jsx)(n.a,{href:\"https://reactjs.org/docs/hooks-reference.html#usereducer\",children:(0,e.jsx)(n.code,{children:\"useReducer\"})}),\" where we modify the state using \",(0,e.jsx)(n.code,{children:\"dispatch\"}),\" function, so \",(0,e.jsx)(n.code,{children:\"setState\"}),\" is a simplified \",(0,e.jsx)(n.code,{children:\"dispatch\"}),\" function.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"\\xA0\"}),`\n`,(0,e.jsx)(n.h2,{children:\"Lazy Initialization of state\"}),`\n`,(0,e.jsx)(n.p,{children:\"React useState hook can take a callback function as an initial value, this is called as lazy initialization of state.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Which means the return value of callback function going to set the state only once throughout the lifecycle of that component when the component mounts and rendered initially.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-jsx\",children:(0,e.jsxs)(n.code,{className:\"language-jsx\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"state\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" setState\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\tuseState\",(0,e.jsxs)(n.span,{className:\"token tag\",children:[(0,e.jsxs)(n.span,{className:\"token tag\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"<\"}),\"string\"]}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\">\"})]}),(0,e.jsx)(n.span,{className:\"token plain-text\",children:\"(() => \"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\t\",(0,e.jsx)(n.span,{className:\"token console class-name\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"function call\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// this will log for only once in the lifecycle of the component\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\t\",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token literal-property property\",children:\"initialState\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" string \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"someExpensiveComputation\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"props\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\t\",(0,e.jsx)(n.span,{className:\"token keyword control-flow\",children:\"return\"}),\" initialState\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token plain-text\",children:`);\n`})]}),(0,e.jsx)(n.span,{className:\"code-line\",children:(0,e.jsx)(n.span,{className:\"token plain-text\",children:`// This is called as lazy initialization of state\n`})})]})}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.strong,{children:\"Tips:\"})}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Always remember to return the value of type you want to set the state for in the callback function, doing not so can lead to \",(0,e.jsx)(n.a,{href:\"https://codesandbox.io/s/dazzling-jones-b6w4q5?file=/src/ControlledUncontrolled.jsx\",children:\"uncontrolled components\"}),\" sometimes.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Lazy initialization of state is analogous to passing initial state through \",(0,e.jsx)(n.code,{children:\"useDispatch(reducerFn, initialValue)\"})]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"useReducer\"}),\" is usually preferable to \",(0,e.jsx)(n.code,{children:\"useState\"}),\" when you have complex state logic that involves multiple sub-values. It also lets you optimize performance for components that trigger deep updates because you can pass \",(0,e.jsx)(n.code,{children:\"dispatch\"}),\" down instead of callbacks.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"It can be handy and performant when you are using custom hooks that utilize useState or when reading the state gets expensive.\"}),`\n`,(0,e.jsx)(n.p,{children:\"I can think of a scenario where reading the state can get expensive is when we are managing a state of browser localstorage value.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsxs)(n.code,{className:\"language-javascript\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// Here is a basic implementation of a custom hook for maintaining the state of localstorage value\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"useLocalStorageState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"key\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" defaultValue \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"state\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" setState\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"React\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"useState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\t\",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// We don't want to get our state value everytime from localstorage as it can take some time and lead to perfomance issues\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\t\",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" valueInLocalStorage \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token dom variable\",children:\"window\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"localStorage\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"getItem\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"key\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\t\",(0,e.jsx)(n.span,{className:\"token keyword control-flow\",children:\"if\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"valueInLocalStorage\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\t\t\",(0,e.jsx)(n.span,{className:\"token keyword control-flow\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token known-class-name class-name\",children:\"JSON\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"stringify\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"valueInLocalStorage\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\t\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\t\",(0,e.jsx)(n.span,{className:\"token keyword control-flow\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"typeof\"}),\" defaultValue \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"===\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"function\"'}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"?\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"defaultValue\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" defaultValue\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"React\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"useEffect\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\t\",(0,e.jsx)(n.span,{className:\"token dom variable\",children:\"window\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token property-access\",children:\"localStorage\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"setItem\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"key\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token known-class-name class-name\",children:\"JSON\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"parse\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"state\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"key\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" state\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\",(0,e.jsx)(n.span,{className:\"token keyword control-flow\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"state\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" setState\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"When we are calling this custom hook from other components like below, we don't want to set the initial value to \",(0,e.jsx)(n.code,{children:\"initialValue\"}),\" everytime and override the localstorage value. \",(0,e.jsx)(n.em,{children:\"so setting the value lazily can get us out of this situation without overriding the localstorage value and it helps in increasing the performance of the app by saving calls to localstorage for the value.\"})]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-javascript\",children:(0,e.jsx)(n.code,{className:\"language-javascript\",children:(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" storage \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"useLocalStorageName\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"keyName\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" initialValue\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]})})}),`\n`,(0,e.jsx)(n.h2,{children:\"Storing a function with useState hook :\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Yes, you heard it right. we can store a function with \",(0,e.jsx)(n.code,{children:\"useState\"}),` hook.\nbut merely passing a function to setState won't do this work. We should return a function to a callback function`]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-jsx\",children:(0,e.jsxs)(n.code,{className:\"language-jsx\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"myState\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" setMyState\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"React\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"useState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token parameter\",children:\"x\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"5\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"*\"}),\" x\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// this don't set the myState to a function, remember Lazy initialization. in fact it is illegal to pass arguments to callback function for useState.\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"doing this will set the state to a function.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-jsx\",children:(0,e.jsxs)(n.code,{className:\"language-jsx\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"myState\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" setMyState\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token maybe-class-name\",children:\"React\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"useState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token parameter\",children:\"x\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"5\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"*\"}),\" x\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// this will set the myState to a function.\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"if you pass a function as a call back function and return it, the state will get initialized with a function.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-jsx\",children:(0,e.jsxs)(n.code,{className:\"language-jsx\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// Now we can use myState as a function\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" value \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"myState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"10\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token console class-name\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"value\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// output: 50\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token console class-name\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"myState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"20\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// output: 100\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"\\xA0\"}),`\n`,(0,e.jsx)(n.h2,{children:\"How can we mutate a state hook with a function?\"}),`\n`,(0,e.jsx)(n.p,{children:\"Just like initialisation, passing a function to a state setter has a special meaning in React.\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://reactjs.org/docs/hooks-reference.html#functional-updates\",children:\"It is used when you want to compute the next state \\u201Creductively,\\u201D\"})}),`\n`,(0,e.jsx)(n.pre,{className:\"language-jsx\",children:(0,e.jsxs)(n.code,{className:\"language-jsx\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"count\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" setCount\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"useState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"initialCount\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"setCount\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token parameter\",children:\"prevCount\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" prevCount \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"+\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// increase the count by one\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// passing a function to setCount will result in updating the previous state value with return value of the function with previous state value as an argument.\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"if we intend to change the state which store function, doing this will update the\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-jsx\",children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"setMyState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token parameter\",children:\"x\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"2\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"*\"}),\" x\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]})})}),`\n`,(0,e.jsx)(n.p,{children:\"now myState has updated to a new function we set\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-jsx\",children:(0,e.jsxs)(n.code,{className:\"language-jsx\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"myState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"10\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// output: 20\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Here is a \",(0,e.jsx)(n.a,{href:\"https://codesandbox.io/s/busy-kapitsa-c7pkfm?file=/src/App.js:365-395\",children:\" codesandbox\"}),` you can play with.\n`,(0,e.jsx)(n.br,{}),`\n`]}),`\n`,(0,e.jsx)(t,{type:\"info\",children:\"Although it is possible to store functions with useState hook don't abuse it, consider using useCallback hook for storing functions.\"}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Although it is possible to store functions with useState hook don't abuse it, consider using useCallback hook for storing functions.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.br,{}),`\n`,(0,e.jsx)(n.br,{}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"TL;DR\"}),`\n`,(0,e.jsx)(n.p,{children:\"There is a subtle difference how you store a state value and how you store a function with react useState hook. If you pass a callback function returning a value to the useState hook, state will be initialized for only for once with the value you are returning when the component mounts and rendered for the first time. It is called Lazy Initialization of state.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-jsx\",children:(0,e.jsxs)(n.code,{className:\"language-jsx\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"state\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" setState\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"useState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\",(0,e.jsx)(n.span,{className:\"token console class-name\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token method function property-access\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"function call\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// this will log for only once in the lifecycle of the component\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"\t\",(0,e.jsx)(n.span,{className:\"token keyword control-flow\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"This is set for the first time\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// This is called as lazy initialization of state\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"if you pass a function as a call back function and return it the state will get initialized with a function.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-jsx\",children:(0,e.jsxs)(n.code,{className:\"language-jsx\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"multiplyState\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" setMultiplyFn\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"useState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token parameter\",children:\"x\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"5\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"*\"}),\" x\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" product \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"multiplyState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"10\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// product is 50\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// Although it is possible to store functions with useState hook consider using useCallback hook for this purpose\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.pre,{className:\"language-jsx\",children:(0,e.jsxs)(n.code,{className:\"language-jsx\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// this won't store a function in the state\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"multiplyFn\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"useState\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token parameter\",children:\"x\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"3\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"*\"}),\" x\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" product \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"myMultiplier\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"10\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})})]})}function S(a={}){let{wrapper:n}=a.components||{};return n?(0,e.jsx)(n,Object.assign({},a,{children:(0,e.jsx)(p,a)})):p(a)}var x=S;function d(a,n,s){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(s?\"\\nIt\\u2019s referenced in your code at `\"+s+\"` in `/home/shanmukh/Projects/portfolio-next-sass/data/blog/_mdx_bundler_entry_point-1dfadbce-6b76-42b0-b6a4-e8a6415faedc.mdx`\":\"\"))}return w(v);})();\n;return Component;"
  },
  "_id": "use-state-lazy-init.mdx",
  "_raw": {
    "sourceFilePath": "use-state-lazy-init.mdx",
    "sourceFileName": "use-state-lazy-init.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "use-state-lazy-init"
  },
  "type": "Post",
  "slug": "use-state-lazy-init",
  "image": "/blog/use-state-lazy-init/image.png",
  "og": "/blog/use-state-lazy-init/og.jpg",
  "readingTime": {
    "text": "6 min read",
    "minutes": 5.265,
    "time": 315900,
    "words": 1053
  }
}